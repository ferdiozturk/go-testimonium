// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package testimonium

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// TestimoniumABI is the input ABI used to generate the binding from.
const TestimoniumABI = "[{\"constant\":true,\"inputs\":[],\"name\":\"longestChainEndpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"name\":\"noOfConfirmations\",\"type\":\"uint8\"},{\"name\":\"rlpEncodedReceipt\",\"type\":\"bytes\"},{\"name\":\"path\",\"type\":\"bytes\"},{\"name\":\"rlpEncodedNodes\",\"type\":\"bytes\"}],\"name\":\"verifyReceipt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"getHeaderMetaInfo\",\"outputs\":[{\"name\":\"successors\",\"type\":\"bytes32[]\"},{\"name\":\"orderedIndex\",\"type\":\"uint256\"},{\"name\":\"iterableIndex\",\"type\":\"uint256\"},{\"name\":\"latestFork\",\"type\":\"bytes32\"},{\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"isUnlocked\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"isBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"name\":\"disputeBlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBlockHashOfEndpoint\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"name\":\"noOfConfirmations\",\"type\":\"uint8\"},{\"name\":\"rlpEncodedTx\",\"type\":\"bytes\"},{\"name\":\"path\",\"type\":\"bytes\"},{\"name\":\"rlpEncodedNodes\",\"type\":\"bytes\"}],\"name\":\"verifyTransaction\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"name\":\"getHeader\",\"outputs\":[{\"name\":\"parent\",\"type\":\"bytes32\"},{\"name\":\"uncleHash\",\"type\":\"bytes32\"},{\"name\":\"stateRoot\",\"type\":\"bytes32\"},{\"name\":\"transactionsRoot\",\"type\":\"bytes32\"},{\"name\":\"receiptsRoot\",\"type\":\"bytes32\"},{\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"name\":\"rlpHeaderHashWithoutNonce\",\"type\":\"bytes32\"},{\"name\":\"timestamp\",\"type\":\"uint256\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"difficulty\",\"type\":\"uint256\"},{\"name\":\"totalDifficulty\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_rlpHeader\",\"type\":\"bytes\"}],\"name\":\"submitHeader\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"name\":\"noOfConfirmations\",\"type\":\"uint8\"},{\"name\":\"rlpEncodedState\",\"type\":\"bytes\"},{\"name\":\"path\",\"type\":\"bytes\"},{\"name\":\"rlpEncodedNodes\",\"type\":\"bytes\"}],\"name\":\"verifyState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getNoOfForks\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_rlpHeader\",\"type\":\"bytes\"},{\"name\":\"totalDifficulty\",\"type\":\"uint256\"},{\"name\":\"_ethashContractAddr\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"isPoWValid\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"errorCode\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"errorInfo\",\"type\":\"uint256\"}],\"name\":\"PoWValidationResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"RemoveBranch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"SubmitBlockHeader\",\"type\":\"event\"}]"

// TestimoniumBin is the compiled bytecode used for deploying new contracts.
var TestimoniumBin = "0x60806040523480156200001157600080fd5b5060405162004c8038038062004c80833981810160405260608110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b828101905060208101848111156200006757600080fd5b81518560018202830111640100000000821117156200008557600080fd5b505092919060200180519060200190929190805190602001909291905050506000620000b0620013d8565b620000c1856200029360201b60201c565b809250819350505083816101600181815250506001600283908060018154018082558091505090600182039060005260206000200160009091929091909150550381610180015160200181815250506001600383908060018154018082558091505090600182039060005260206000200160009091929091909150550381610180015160400181815250504281610180015160800181815250508060016000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c016000820151816000019080519060200190620002139291906200145a565b5060208201518160010155604082015181600201556060820151816003015560808201518160040155505090505081600481905550826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050506200155c565b60006200029f620013d8565b620002a9620013d8565b620002b3620014ac565b620002de620002cd866200083560201b620022041760201c565b6200086560201b620022321760201c565b90506000805b620002fa83620008c660201b620022801760201c565b15620006275760008114156200034757620003356200032484620008f260201b620022aa1760201c565b6200095f60201b620023041760201c565b60001b84600001818152505062000619565b60018114156200038e576200037c6200036b84620008f260201b620022aa1760201c565b6200095f60201b620023041760201c565b60001b84602001818152505062000618565b6003811415620003d557620003c3620003b284620008f260201b620022aa1760201c565b6200095f60201b620023041760201c565b60001b84604001818152505062000617565b60048114156200041c576200040a620003f984620008f260201b620022aa1760201c565b6200095f60201b620023041760201c565b60001b84606001818152505062000616565b60058114156200046357620004516200044084620008f260201b620022aa1760201c565b6200095f60201b620023041760201c565b60001b84608001818152505062000615565b6007811415620004a857620004986200048784620008f260201b620022aa1760201c565b6200095f60201b620023041760201c565b8461014001818152505062000614565b6008811415620004ec57620004dd620004cc84620008f260201b620022aa1760201c565b6200095f60201b620023041760201c565b8460a001818152505062000613565b60098114156200053057620005216200051084620008f260201b620022aa1760201c565b6200095f60201b620023041760201c565b8460c001818152505062000612565b600a8114156200056d57620005656200055484620008f260201b620022aa1760201c565b6200095f60201b620023041760201c565b915062000611565b600b811415620005b257620005a26200059184620008f260201b620022aa1760201c565b6200095f60201b620023041760201c565b8461010001818152505062000610565b600e811415620005f757620005e7620005d684620008f260201b620022aa1760201c565b6200095f60201b620023041760201c565b846101200181815250506200060f565b6200060d83620008f260201b620022aa1760201c565b505b5b5b5b5b5b5b5b5b5b5b8080600101915050620002e4565b6000878051906020012090506200064481620009db60201b60201c565b15620006b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f626c6f636b20616c72656164792065786973747300000000000000000000000081525060200191505060405180910390fd5b6060620006d089602a8b5103620009fe60201b60201c565b90506000602a60038b510303905060008160f01b905080600060028110620006f457fe5b1a60f81b836001815181106200070657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806001600281106200074357fe5b1a60f81b836002815181106200075557fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600083805190602001209050808960e0018181525050620007ac898862000aca60201b60201c565b6000600160008b600001518152602001908152602001600020905089610140015181600b0154018a6101600181815250507fd2e39e7cf9d53e31fad1c42bf2492877187827c962f28faacd69c50b9fa09d36868b60a00151604051808381526020018281526020019250505060405180910390a1858a9b509b5050505050505050505050915091565b6200083f620014ce565b600060208301905060405180604001604052808451815260200182815250915050919050565b6200086f620014ac565b62000880826200109860201b60201c565b6200088a57600080fd5b6000620008a18360200151620010ea60201b60201c565b8360200151019050604051806040016040528084815260200182815250915050919050565b6000620008d2620014ce565b826000015190508060000151816020015101836020015110915050919050565b620008fc620014ce565b6200090d82620008c660201b60201c565b6200091757600080fd5b600082602001519050600062000933826200117b60201b60201c565b905080820184602001818152505060405180604001604052808281526020018381525092505050919050565b60008082600001511180156200097a57506021826000015111155b6200098457600080fd5b60006200099b8360200151620010ea60201b60201c565b90506000818460000151039050600080838660200151019050805191506020831015620009cf57826020036101000a820491505b81945050505050919050565b600080600160008481526020019081526020016000206009015414159050919050565b60606000829050835181111562000a1457835190505b6060816040519080825280601f01601f19166020018201604052801562000a4a5781602001600182028038833980820191505090505b50905060008090505b8281101562000abe5785818151811062000a6957fe5b602001015160f81c60f81b82828151811062000a8157fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808060010191505062000a53565b50809250505092915050565b6000600280549050141562000adf5762001094565b60006001600084600001518152602001908152602001600020905060008160090154141562000b76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f6e6f6e2d6578697374656e7420706172656e740000000000000000000000000081525060200191505060405180910390fd5b8260a0015160018260050154011462000bf7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f696c6c6567616c20626c6f636b206e756d62657200000000000000000000000081525060200191505060405180910390fd5b600f4201836101000151111562000c76576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f696c6c6567616c2074696d657374616d7000000000000000000000000000000081525060200191505060405180910390fd5b82610100015181600801541062000cf5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f696c6c6567616c2074696d657374616d7000000000000000000000000000000081525060200191505060405180910390fd5b600062000e2882604051806101a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c82016040518060a00160405290816000820180548060200260200160405190810160405280929190818152602001828054801562000de157602002820191906000526020600020905b81548152602001906001019080831162000dcc575b50505050508152602001600182015481526020016002820154815260200160038201548152602001600482015481525050815250508561010001516200123b60201b60201c565b9050836101400151811462000ea5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f77726f6e6720646966666963756c74790000000000000000000000000000000081525060200191505060405180910390fd5b677fffffffffffffff8460c00151111562000f28576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f676173206c696d697420746f6f2068696768000000000000000000000000000081525060200191505060405180910390fd5b6113888460c00151101562000fa5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f676173206c696d697420746f6f20736d616c6c0000000000000000000000000081525060200191505060405180910390fd5b62000fbf8460c0015183600601546200137260201b60201c565b62001032576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f696c6c6567616c20676173206c696d697400000000000000000000000000000081525060200191505060405180910390fd5b8360c0015183111562001091576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602581526020018062004c5b6025913960400191505060405180910390fd5b50505b5050565b60008082600001511415620010b15760009050620010e5565b60008083602001519050805160001a915060c060ff168260ff161015620010de57600092505050620010e5565b6001925050505b919050565b600080825160001a9050608060ff168110156200110c57600091505062001176565b60b860ff1681108062001133575060c060ff16811015801562001132575060f860ff1681105b5b156200114457600191505062001176565b60c060ff16811015620011665760018060b80360ff1682030191505062001176565b60018060f80360ff168203019150505b919050565b6000806000835160001a9050608060ff168110156200119e576001915062001231565b60b860ff16811015620011bd576001608060ff16820301915062001230565b60c060ff16811015620011ef5760b78103600185019450806020036101000a855104600182018101935050506200122f565b60f860ff168110156200120e57600160c060ff1682030191506200122e565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b60008060098461010001518403816200125057fe5b0490507f1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347846020015114156200128c5780600103905062001293565b8060020390505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d811215620012e0577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d90505b8061080085610140015181620012f257fe5b05028461014001510190506202000081121562001310576202000090505b6000624c4b3f90506000809050818660a00151106200133357818660a001510390505b6000620186a082816200134257fe5b049050600181111562001364576002810360020a84019450505050506200136c565b839450505050505b92915050565b60008061040060070b8360070b816200138757fe5b0590506000838503905060008160070b1215620013c4577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810290505b8160070b8160070b13159250505092915050565b60405180610220016040528060008019168152602001600080191681526020016000801916815260200160008019168152602001600080191681526020016000815260200160008152602001600080191681526020016000815260200160008152602001600081526020016000815260200162001454620014e8565b81525090565b82805482825590600052602060002090810192821562001499579160200282015b82811115620014985782518255916020019190600101906200147b565b5b509050620014a891906200151a565b5090565b6040518060600160405280620014c162001542565b8152602001600081525090565b604051806040016040528060008152602001600081525090565b6040518060a0016040528060608152602001600081526020016000815260200160008019168152602001600081525090565b6200153f91905b808211156200153b57600081600090555060010162001521565b5090565b90565b604051806040016040528060008152602001600081525090565b6136ef806200156c6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806384bc44b31161007157806384bc44b314610572578063a90a51f4146105b4578063b9615878146107ce578063c565ba101461085d578063fadfdb8114610918578063fbb5df3814610b32576100b4565b80630aa7fc0f146100b957806310fa6e83146100d75780633b93fc10146102f15780633dadc1e114610390578063528a309f146103d657806366962b261461041c575b600080fd5b6100c1610b50565b6040518082815260200191505060405180910390f35b6102d5600480360360a08110156100ed57600080fd5b8101908080359060200190929190803560ff1690602001909291908035906020019064010000000081111561012157600080fd5b82018360208201111561013357600080fd5b8035906020019184600183028401116401000000008311171561015557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156101b857600080fd5b8201836020820111156101ca57600080fd5b803590602001918460018302840111640100000000831117156101ec57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561024f57600080fd5b82018360208201111561026157600080fd5b8035906020019184600183028401116401000000008311171561028357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610b56565b604051808260ff1660ff16815260200191505060405180910390f35b61031d6004803603602081101561030757600080fd5b8101908080359060200190929190505050610b87565b6040518080602001868152602001858152602001848152602001838152602001828103825287818151815260200191508051906020019060200280838360005b8381101561037857808201518184015260208101905061035d565b50505050905001965050505050505060405180910390f35b6103bc600480360360208110156103a657600080fd5b8101908080359060200190929190505050610c33565b604051808215151515815260200191505060405180910390f35b610402600480360360208110156103ec57600080fd5b8101908080359060200190929190505050610c58565b604051808215151515815260200191505060405180910390f35b6105706004803603606081101561043257600080fd5b81019080803590602001909291908035906020019064010000000081111561045957600080fd5b82018360208201111561046b57600080fd5b8035906020019184602083028401116401000000008311171561048d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156104ed57600080fd5b8201836020820111156104ff57600080fd5b8035906020019184602083028401116401000000008311171561052157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610c7b565b005b61059e6004803603602081101561058857600080fd5b810190808035906020019092919050505061102b565b6040518082815260200191505060405180910390f35b6107b2600480360360a08110156105ca57600080fd5b8101908080359060200190929190803560ff169060200190929190803590602001906401000000008111156105fe57600080fd5b82018360208201111561061057600080fd5b8035906020019184600183028401116401000000008311171561063257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561069557600080fd5b8201836020820111156106a757600080fd5b803590602001918460018302840111640100000000831117156106c957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561072c57600080fd5b82018360208201111561073e57600080fd5b8035906020019184600183028401116401000000008311171561076057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061104c565b604051808260ff1660ff16815260200191505060405180910390f35b6107fa600480360360208110156107e457600080fd5b810190808035906020019092919050505061107d565b604051808d81526020018c81526020018b81526020018a81526020018981526020018881526020018781526020018681526020018581526020018481526020018381526020018281526020019c5050505050505050505050505060405180910390f35b6109166004803603602081101561087357600080fd5b810190808035906020019064010000000081111561089057600080fd5b8201836020820111156108a257600080fd5b803590602001918460018302840111640100000000831117156108c457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061110a565b005b610b16600480360360a081101561092e57600080fd5b8101908080359060200190929190803560ff1690602001909291908035906020019064010000000081111561096257600080fd5b82018360208201111561097457600080fd5b8035906020019184600183028401116401000000008311171561099657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156109f957600080fd5b820183602082011115610a0b57600080fd5b80359060200191846001830284011164010000000083111715610a2d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610a9057600080fd5b820183602082011115610aa257600080fd5b80359060200191846001830284011164010000000083111715610ac457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061143a565b604051808260ff1660ff16815260200191505060405180910390f35b610b3a61146b565b6040518082815260200191505060405180910390f35b60045481565b6000610b7c8686868686600160008d815260200190815260200160002060040154611478565b905095945050505050565b6060600080600080600060016000888152602001908152602001600020905080600c0160000181600c016001015482600c016002015483600c016003015484600c016004015484805480602002602001604051908101604052809291908181526020018280548015610c1857602002820191906000526020600020905b815481526020019060010190808311610c04575b50505050509450955095509550955095505091939590929450565b60004260016000848152602001908152602001600020600c0160040154109050919050565b600080600160008481526020019081526020016000206009015414159050919050565b610c8483610c33565b15610cf7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f6469737075746520706572696f6420697320657870697265640000000000000081525060200191505060405180910390fd5b610cff6134d0565b60016000858152602001908152602001600020604051806101a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c82016040518060a001604052908160008201805480602002602001604051908101604052809291908181526020018280548015610df557602002820191906000526020600020905b815481526020019060010190808311610de1575b5050505050815260200160018201548152602001600282015481526020016003820154815260200160048201548152505081525050905060008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329e265df8560a001518660e001518761012001518861014001518b8b6040518763ffffffff1660e01b8152600401808781526020018681526020018581526020018481526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610ef4578082015181840152602081019050610ed9565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610f36578082015181840152602081019050610f1b565b505050509050019850505050505050505060606040518083038186803b158015610f5f57600080fd5b505afa158015610f73573d6000803e3d6000fd5b505050506040513d6060811015610f8957600080fd5b810190808051906020019092919080519060200190929190805190602001909291905050508093508194508295505050507f808f84bd298b89733055f3b8294b385ed860b67438b792ff9e312c897a2fcd9f8383836040518084151515158152602001838152602001828152602001935050505060405180910390a1821580156110135750600282145b1561102257611021876114e4565b5b50505050505050565b60006003828154811061103a57fe5b90600052602060002001549050919050565b60006110728686868686600160008d815260200190815260200160002060030154611478565b905095945050505050565b6000806000806000806000806000806000806000600160008f8152602001908152602001600020905080600001548160010154826002015483600301548460040154856005015486600601548760070154886008015489600901548a600a01548b600b01549c509c509c509c509c509c509c509c509c509c509c509c505091939597999b5091939597999b565b60006111146134d0565b61111d8361172c565b809250819350505060006001600083600001518152602001908152602001600020905080600c0160000183908060018154018082558091505090600182039060005260206000200160009091929091909150555061012c420182610180015160800181815250508160000151600282600c01600101548154811061119d57fe5b906000526020600020015414156112465782600282600c0160010154815481106111c357fe5b906000526020600020018190555080600c0160010154826101800151602001818152505082600382600c0160020154815481106111fc57fe5b906000526020600020018190555080600c0160020154826101800151604001818152505080600c016002016000905580600c01600301548261018001516060018181525050611323565b60016002849080600181540180825580915050906001820390600052602060002001600090919290919091505503826101800151602001818152505060016003849080600181540180825580915050906001820390600052602060002001600090919290919091505503826101800151604001818152505081600001518261018001516060018181525050600281600c01600001805490501415611322576113216001600083600c016000016000815481106112fe57fe5b906000526020600020015481526020019081526020016000208360000151611b41565b5b5b600160006004548152602001908152602001600020600b0154826101600151111561135057826004819055505b8160016000858152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015561014082015181600a015561016082015181600b015561018082015181600c016000820151816000019080519060200190611406929190613550565b5060208201518160010155604082015181600201556060820151816003015560808201518160040155505090505050505050565b60006114608686868686600160008d815260200190815260200160002060020154611478565b905095945050505050565b6000600380549050905090565b600080600160008981526020019081526020016000206009015414156114a157600190506114da565b6114ab8787611bb3565b6114b857600290506114da565b60006114c686868686611d5a565b11156114d557600390506114da565b600090505b9695505050505050565b600060016000838152602001908152602001600020600001549050600060016000838152602001908152602001600020905061151f83612025565b600181600c0160000180549050141561158f5781600282600c01600101548154811061154757fe5b90600052602060002001819055506001600383908060018154018082558091505090600182039060005260206000200160009091929091909150550381600c01600201819055505b60008090505b81600c0160000180549050811015611642578382600c0160000182815481106115ba57fe5b906000526020600020015414156116355781600c01600001600183600c016000018054905003815481106115ea57fe5b906000526020600020015482600c01600001828154811061160757fe5b906000526020600020018190555081600c0160000180548091906001900361162f919061359d565b50611642565b8080600101915050611595565b50600360008154811061165157fe5b90600052602060002001546004819055506000600190505b6003805490508110156116ef57600160006004548152602001908152602001600020600b015460016000600384815481106116a057fe5b90600052602060002001548152602001908152602001600020600b015411156116e257600381815481106116d057fe5b90600052602060002001546004819055505b8080600101915050611669565b507ff96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4836040518082815260200191505060405180910390a1505050565b60006117366134d0565b61173e6134d0565b6117466135c9565b61175761175286612204565b612232565b90506000805b61176683612280565b1561195057600081141561179657611785611780846122aa565b612304565b60001b846000018181525050611943565b60018114156117c1576117b06117ab846122aa565b612304565b60001b846020018181525050611942565b60038114156117ec576117db6117d6846122aa565b612304565b60001b846040018181525050611941565b600481141561181757611806611801846122aa565b612304565b60001b846060018181525050611940565b60058114156118425761183161182c846122aa565b612304565b60001b84608001818152505061193f565b600781141561186b5761185c611857846122aa565b612304565b8461014001818152505061193e565b600881141561189357611885611880846122aa565b612304565b8460a001818152505061193d565b60098114156118bb576118ad6118a8846122aa565b612304565b8460c001818152505061193c565b600a8114156118dc576118d56118d0846122aa565b612304565b915061193b565b600b811415611905576118f66118f1846122aa565b612304565b8461010001818152505061193a565b600e81141561192e5761191f61191a846122aa565b612304565b84610120018181525050611939565b611937836122aa565b505b5b5b5b5b5b5b5b5b5b5b808060010191505061175d565b60008780519060200120905061196581610c58565b156119d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f626c6f636b20616c72656164792065786973747300000000000000000000000081525060200191505060405180910390fd5b60606119e889602a8b5103612375565b90506000602a60038b510303905060008160f01b905080600060028110611a0b57fe5b1a60f81b83600181518110611a1c57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080600160028110611a5857fe5b1a60f81b83600281518110611a6957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600083805190602001209050808960e0018181525050611ab8898861243b565b6000600160008b600001518152602001908152602001600020905089610140015181600b0154018a6101600181815250507fd2e39e7cf9d53e31fad1c42bf2492877187827c962f28faacd69c50b9fa09d36868b60a00151604051808381526020018281526020019250505060405180910390a1858a9b509b5050505050505050505050915091565b8082600c01600301541415611b5557611baf565b8082600c0160030181905550600182600c01600001805490501415611bae57611bad6001600084600c01600001600081548110611b8e57fe5b9060005260206000200154815260200190815260200160002082611b41565b5b5b5050565b600080600454905060006004549050600085905060008090505b600115611d245780158015611be157508682145b15611c7a57611bef83610c33565b15611c79578560ff16600160008981526020019081526020016000206005015401600160008581526020019081526020016000206005015410611c355760019050611c78565b611c3f83856129eb565b915060016000838152602001908152602001600020600501548660ff16600160008a815260200190815260200160002060050154010395505b5b5b60016000888152602001908152602001600020600c016001015460016000858152602001908152602001600020600c01600101541015611cc1576000945050505050611d54565b60016000888152602001908152602001600020600c016001015460016000858152602001908152602001600020600c01600101541415611d0057611d24565b82935060016000848152602001908152602001600020600c01600301549250611bcd565b80158015611d395750611d378287612b27565b155b15611d4b576000945050505050611d54565b60019450505050505b92915050565b6000611d646135e9565b611d6d84612204565b90506060611d7a82612bc7565b9050606080600086905060008090506060611d948b612ca4565b9050600081511415611db057600197505050505050505061201d565b60008090505b8651811015612014578151831115611dd95760029850505050505050505061201d565b611df5878281518110611de857fe5b6020026020010151612d4c565b955085805190602001208414611e165760039850505050505050505061201d565b611e27611e2287612204565b612bc7565b9450601185511415611efc578151831415611e90578c80519060200120611e6186601081518110611e5457fe5b6020026020010151612d4c565b805190602001201415611e7f5760009850505050505050505061201d565b60049850505050505050505061201d565b6000828481518110611e9e57fe5b602001015160f81c60f81b60f81c905060108160ff161115611ecc576005995050505050505050505061201d565b611eeb868260ff1681518110611ede57fe5b6020026020010151612304565b60001b945060018401935050612007565b600285511415611ff557611f2d611f2686600081518110611f1957fe5b6020026020010151612d4c565b8385612dd8565b830192508151831415611f8e578c80519060200120611f5f86600181518110611f5257fe5b6020026020010151612d4c565b805190602001201415611f7d5760009850505050505050505061201d565b60069850505050505050505061201d565b6000611fb7611fb087600081518110611fa357fe5b6020026020010151612d4c565b8486612dd8565b1415611fce5760079850505050505050505061201d565b611feb85600181518110611fde57fe5b6020026020010151612304565b60001b9350612006565b60089850505050505050505061201d565b5b8080600101915050611db6565b50505050505050505b949350505050565b600060016000838152602001908152602001600020905060008090505b81600c01600001805490508110156120865761207982600c01600001828154811061206957fe5b9060005260206000200154612025565b8080600101915050612042565b5081600282600c01600101548154811061209c57fe5b9060005260206000200154141561215357600281600c0160010154815481106120c157fe5b906000526020600020016000905560006003600160038054905003815481106120e657fe5b9060005260206000200154905080600383600c01600201548154811061210857fe5b9060005260206000200181905550600380548091906001900361212b919061359d565b5081600c016002015460016000838152602001908152602001600020600c0160020181905550505b60016000838152602001908152602001600020600080820160009055600182016000905560028201600090556003820160009055600482016000905560058201600090556006820160009055600782016000905560088201600090556009820160009055600a820160009055600b820160009055600c8201600080820160006121dc9190613603565b6001820160009055600282016000905560038201600090556004820160009055505050505050565b61220c6135e9565b600060208301905060405180604001604052808451815260200182815250915050919050565b61223a6135c9565b61224382612ecb565b61224c57600080fd5b600061225b8360200151612f19565b8360200151019050604051806040016040528084815260200182815250915050919050565b600061228a6135e9565b826000015190508060000151816020015101836020015110915050919050565b6122b26135e9565b6122bb82612280565b6122c457600080fd5b60008260200151905060006122d882612fa2565b905080820184602001818152505060405180604001604052808281526020018381525092505050919050565b600080826000015111801561231e57506021826000015111155b61232757600080fd5b60006123368360200151612f19565b9050600081846000015103905060008083866020015101905080519150602083101561236957826020036101000a820491505b81945050505050919050565b60606000829050835181111561238a57835190505b6060816040519080825280601f01601f1916602001820160405280156123bf5781602001600182028038833980820191505090505b50905060008090505b8281101561242f578581815181106123dc57fe5b602001015160f81c60f81b8282815181106123f357fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506123c8565b50809250505092915050565b6000600280549050141561244e576129e7565b6000600160008460000151815260200190815260200160002090506000816009015414156124e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f6e6f6e2d6578697374656e7420706172656e740000000000000000000000000081525060200191505060405180910390fd5b8260a00151600182600501540114612564576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f696c6c6567616c20626c6f636b206e756d62657200000000000000000000000081525060200191505060405180910390fd5b600f420183610100015111156125e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f696c6c6567616c2074696d657374616d7000000000000000000000000000000081525060200191505060405180910390fd5b826101000151816008015410612660576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f696c6c6567616c2074696d657374616d7000000000000000000000000000000081525060200191505060405180910390fd5b600061278982604051806101a001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152602001600a8201548152602001600b8201548152602001600c82016040518060a00160405290816000820180548060200260200160405190810160405280929190818152602001828054801561274957602002820191906000526020600020905b815481526020019060010190808311612735575b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820154815250508152505085610100015161305a565b90508361014001518114612805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f77726f6e6720646966666963756c74790000000000000000000000000000000081525060200191505060405180910390fd5b677fffffffffffffff8460c001511115612887576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f676173206c696d697420746f6f2068696768000000000000000000000000000081525060200191505060405180910390fd5b6113888460c001511015612903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f676173206c696d697420746f6f20736d616c6c0000000000000000000000000081525060200191505060405180910390fd5b6129158460c001518360060154613187565b612987576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f696c6c6567616c20676173206c696d697400000000000000000000000000000081525060200191505060405180910390fd5b8360c001518311156129e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806136966025913960400191505060405180910390fd5b50505b5050565b60006001806000858152602001908152602001600020600c01600001805490501415612a485760016000848152602001908152602001600020600c01600001600081548110612a3657fe5b90600052602060002001549050612b21565b6001806000858152602001908152602001600020600c01600001805490501115612b1d5760008090505b60016000858152602001908152602001600020600c0160000180549050811015612b1b57600060016000868152602001908152602001600020600c016000018281548110612abc57fe5b9060005260206000200154905060016000858152602001908152602001600020600c016001015460016000838152602001908152602001600020600c01600101541415612b0d578092505050612b21565b508080600101915050612a72565b505b8290505b92915050565b6000612b3283610c33565b612b3f5760009050612bc1565b60008260ff161415612b545760019050612bc1565b600060016000858152602001908152602001600020600c01600001805490501415612b825760009050612bc1565b612bbe60016000858152602001908152602001600020600c01600001600081548110612baa57fe5b906000526020600020015460018403612b27565b90505b92915050565b6060612bd282612ecb565b612bdb57600080fd5b6000612be6836131eb565b9050606081604051908082528060200260200182016040528015612c2457816020015b612c11613624565b815260200190600190039081612c095790505b5090506000612c368560200151612f19565b8560200151019050600080600090505b84811015612c9757612c5783612fa2565b9150604051806040016040528083815260200184815250848281518110612c7a57fe5b602002602001018190525081830192508080600101915050612c46565b5082945050505050919050565b60608060028351026040519080825280601f01601f191660200182016040528015612cde5781602001600182028038833980820191505090505b50905060008090505b8151811015612d4257612cfa818561325c565b828281518110612d0657fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050612ce7565b5080915050919050565b60606000826000015111612d5f57600080fd5b6000612d6e8360200151612f19565b905060008184600001510390506060816040519080825280601f01601f191660200182016040528015612db05781602001600182028038833980820191505090505b5090506000816020019050612dcc8487602001510182856132e2565b81945050505050919050565b6000806060612de686613349565b9050606081516040519080825280601f01601f191660200182016040528015612e1e5781602001600182028038833980820191505090505b50905060008590505b82518601811015612e99576000878281518110612e4057fe5b602001015160f81c60f81b9050808388840381518110612e5c57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350508080600101915050612e27565b50808051906020012082805190602001201415612eb95781519250612ebe565b600092505b8293505050509392505050565b60008082600001511415612ee25760009050612f14565b60008083602001519050805160001a915060c060ff168260ff161015612f0d57600092505050612f14565b6001925050505b919050565b600080825160001a9050608060ff16811015612f39576000915050612f9d565b60b860ff16811080612f5e575060c060ff168110158015612f5d575060f860ff1681105b5b15612f6d576001915050612f9d565b60c060ff16811015612f8d5760018060b80360ff16820301915050612f9d565b60018060f80360ff168203019150505b919050565b6000806000835160001a9050608060ff16811015612fc35760019150613050565b60b860ff16811015612fe0576001608060ff16820301915061304f565b60c060ff168110156130105760b78103600185019450806020036101000a8551046001820181019350505061304e565b60f860ff1681101561302d57600160c060ff16820301915061304d565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b600080600984610100015184038161306e57fe5b0490507f1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347846020015114156130a8578060010390506130af565b8060020390505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d8112156130fb577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d90505b806108008561014001518161310c57fe5b050284610140015101905062020000811215613129576202000090505b6000624c4b3f90506000809050818660a001511061314b57818660a001510390505b6000620186a0828161315957fe5b0490506001811115613179576002810360020a8401945050505050613181565b839450505050505b92915050565b60008061040060070b8360070b8161319b57fe5b0590506000838503905060008160070b12156131d7577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810290505b8160070b8160070b13159250505092915050565b600080826000015114156132025760009050613257565b600080905060006132168460200151612f19565b84602001510190506000846000015185602001510190505b808210156132505761323f82612fa2565b82019150828060010193505061322e565b8293505050505b919050565b6000806002848161326957fe5b06146132a5576010826002858161327c57fe5b048151811061328757fe5b602001015160f81c60f81b60f81c60ff168161329f57fe5b066132d7565b601082600285816132b257fe5b04815181106132bd57fe5b602001015160f81c60f81b60f81c60ff16816132d557fe5b045b60f81b905092915050565b60008114156132f057613344565b5b602060ff1681106133205782518252602060ff1683019250602060ff1682019150602060ff16810390506132f1565b6000600182602060ff16036101000a03905080198451168184511681811785525050505b505050565b6060806000835111156134c75760008061336460008661325c565b60f81c905060018160ff16148061337e575060038160ff16145b156134165760016002865102036040519080825280601f01601f1916602001820160405280156133bd5781602001600182028038833980820191505090505b50925060006133cd60018761325c565b905080846000815181106133dd57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001925050613457565b600280865102036040519080825280601f01601f19166020018201604052801561344f5781602001600182028038833980820191505090505b509250600091505b60008260ff1690505b83518110156134c35761347b60028460ff168303018761325c565b84828151811061348757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050613460565b5050505b80915050919050565b60405180610220016040528060008019168152602001600080191681526020016000801916815260200160008019168152602001600080191681526020016000815260200160008152602001600080191681526020016000815260200160008152602001600081526020016000815260200161354a61363e565b81525090565b82805482825590600052602060002090810192821561358c579160200282015b8281111561358b578251825591602001919060010190613570565b5b5090506135999190613670565b5090565b8154818355818111156135c4578183600052602060002091820191016135c39190613670565b5b505050565b60405180606001604052806135dc613624565b8152602001600081525090565b604051806040016040528060008152602001600081525090565b50805460008255906000526020600020908101906136219190613670565b50565b604051806040016040528060008152602001600081525090565b6040518060a0016040528060608152602001600081526020016000815260200160008019168152602001600081525090565b61369291905b8082111561368e576000816000905550600101613676565b5090565b9056fe676173207573656420697320686967686572207468616e2074686520676173206c696d6974a265627a7a72305820a14d40e2eeda037b155d600006e1e83c1f9c296e2f63b84947179c16de148ccf64736f6c634300050a0032676173207573656420697320686967686572207468616e2074686520676173206c696d6974"

// DeployTestimonium deploys a new Ethereum contract, binding an instance of Testimonium to it.
func DeployTestimonium(auth *bind.TransactOpts, backend bind.ContractBackend, _rlpHeader []byte, totalDifficulty *big.Int, _ethashContractAddr common.Address) (common.Address, *types.Transaction, *Testimonium, error) {
	parsed, err := abi.JSON(strings.NewReader(TestimoniumABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(TestimoniumBin), backend, _rlpHeader, totalDifficulty, _ethashContractAddr)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Testimonium{TestimoniumCaller: TestimoniumCaller{contract: contract}, TestimoniumTransactor: TestimoniumTransactor{contract: contract}, TestimoniumFilterer: TestimoniumFilterer{contract: contract}}, nil
}

// Testimonium is an auto generated Go binding around an Ethereum contract.
type Testimonium struct {
	TestimoniumCaller     // Read-only binding to the contract
	TestimoniumTransactor // Write-only binding to the contract
	TestimoniumFilterer   // Log filterer for contract events
}

// TestimoniumCaller is an auto generated read-only Go binding around an Ethereum contract.
type TestimoniumCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestimoniumTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TestimoniumTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestimoniumFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TestimoniumFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TestimoniumSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TestimoniumSession struct {
	Contract     *Testimonium      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TestimoniumCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TestimoniumCallerSession struct {
	Contract *TestimoniumCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// TestimoniumTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TestimoniumTransactorSession struct {
	Contract     *TestimoniumTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// TestimoniumRaw is an auto generated low-level Go binding around an Ethereum contract.
type TestimoniumRaw struct {
	Contract *Testimonium // Generic contract binding to access the raw methods on
}

// TestimoniumCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TestimoniumCallerRaw struct {
	Contract *TestimoniumCaller // Generic read-only contract binding to access the raw methods on
}

// TestimoniumTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TestimoniumTransactorRaw struct {
	Contract *TestimoniumTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTestimonium creates a new instance of Testimonium, bound to a specific deployed contract.
func NewTestimonium(address common.Address, backend bind.ContractBackend) (*Testimonium, error) {
	contract, err := bindTestimonium(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Testimonium{TestimoniumCaller: TestimoniumCaller{contract: contract}, TestimoniumTransactor: TestimoniumTransactor{contract: contract}, TestimoniumFilterer: TestimoniumFilterer{contract: contract}}, nil
}

// NewTestimoniumCaller creates a new read-only instance of Testimonium, bound to a specific deployed contract.
func NewTestimoniumCaller(address common.Address, caller bind.ContractCaller) (*TestimoniumCaller, error) {
	contract, err := bindTestimonium(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TestimoniumCaller{contract: contract}, nil
}

// NewTestimoniumTransactor creates a new write-only instance of Testimonium, bound to a specific deployed contract.
func NewTestimoniumTransactor(address common.Address, transactor bind.ContractTransactor) (*TestimoniumTransactor, error) {
	contract, err := bindTestimonium(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TestimoniumTransactor{contract: contract}, nil
}

// NewTestimoniumFilterer creates a new log filterer instance of Testimonium, bound to a specific deployed contract.
func NewTestimoniumFilterer(address common.Address, filterer bind.ContractFilterer) (*TestimoniumFilterer, error) {
	contract, err := bindTestimonium(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TestimoniumFilterer{contract: contract}, nil
}

// bindTestimonium binds a generic wrapper to an already deployed contract.
func bindTestimonium(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(TestimoniumABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Testimonium *TestimoniumRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Testimonium.Contract.TestimoniumCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Testimonium *TestimoniumRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Testimonium.Contract.TestimoniumTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Testimonium *TestimoniumRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Testimonium.Contract.TestimoniumTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Testimonium *TestimoniumCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Testimonium.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Testimonium *TestimoniumTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Testimonium.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Testimonium *TestimoniumTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Testimonium.Contract.contract.Transact(opts, method, params...)
}

// GetBlockHashOfEndpoint is a free data retrieval call binding the contract method 0x84bc44b3.
//
// Solidity: function getBlockHashOfEndpoint(uint256 index) constant returns(bytes32)
func (_Testimonium *TestimoniumCaller) GetBlockHashOfEndpoint(opts *bind.CallOpts, index *big.Int) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Testimonium.contract.Call(opts, out, "getBlockHashOfEndpoint", index)
	return *ret0, err
}

// GetBlockHashOfEndpoint is a free data retrieval call binding the contract method 0x84bc44b3.
//
// Solidity: function getBlockHashOfEndpoint(uint256 index) constant returns(bytes32)
func (_Testimonium *TestimoniumSession) GetBlockHashOfEndpoint(index *big.Int) ([32]byte, error) {
	return _Testimonium.Contract.GetBlockHashOfEndpoint(&_Testimonium.CallOpts, index)
}

// GetBlockHashOfEndpoint is a free data retrieval call binding the contract method 0x84bc44b3.
//
// Solidity: function getBlockHashOfEndpoint(uint256 index) constant returns(bytes32)
func (_Testimonium *TestimoniumCallerSession) GetBlockHashOfEndpoint(index *big.Int) ([32]byte, error) {
	return _Testimonium.Contract.GetBlockHashOfEndpoint(&_Testimonium.CallOpts, index)
}

// GetHeader is a free data retrieval call binding the contract method 0xb9615878.
//
// Solidity: function getHeader(bytes32 blockHash) constant returns(bytes32 parent, bytes32 uncleHash, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, uint256 blockNumber, uint256 gasLimit, bytes32 rlpHeaderHashWithoutNonce, uint256 timestamp, uint256 nonce, uint256 difficulty, uint256 totalDifficulty)
func (_Testimonium *TestimoniumCaller) GetHeader(opts *bind.CallOpts, blockHash [32]byte) (struct {
	Parent                    [32]byte
	UncleHash                 [32]byte
	StateRoot                 [32]byte
	TransactionsRoot          [32]byte
	ReceiptsRoot              [32]byte
	BlockNumber               *big.Int
	GasLimit                  *big.Int
	RlpHeaderHashWithoutNonce [32]byte
	Timestamp                 *big.Int
	Nonce                     *big.Int
	Difficulty                *big.Int
	TotalDifficulty           *big.Int
}, error) {
	ret := new(struct {
		Parent                    [32]byte
		UncleHash                 [32]byte
		StateRoot                 [32]byte
		TransactionsRoot          [32]byte
		ReceiptsRoot              [32]byte
		BlockNumber               *big.Int
		GasLimit                  *big.Int
		RlpHeaderHashWithoutNonce [32]byte
		Timestamp                 *big.Int
		Nonce                     *big.Int
		Difficulty                *big.Int
		TotalDifficulty           *big.Int
	})
	out := ret
	err := _Testimonium.contract.Call(opts, out, "getHeader", blockHash)
	return *ret, err
}

// GetHeader is a free data retrieval call binding the contract method 0xb9615878.
//
// Solidity: function getHeader(bytes32 blockHash) constant returns(bytes32 parent, bytes32 uncleHash, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, uint256 blockNumber, uint256 gasLimit, bytes32 rlpHeaderHashWithoutNonce, uint256 timestamp, uint256 nonce, uint256 difficulty, uint256 totalDifficulty)
func (_Testimonium *TestimoniumSession) GetHeader(blockHash [32]byte) (struct {
	Parent                    [32]byte
	UncleHash                 [32]byte
	StateRoot                 [32]byte
	TransactionsRoot          [32]byte
	ReceiptsRoot              [32]byte
	BlockNumber               *big.Int
	GasLimit                  *big.Int
	RlpHeaderHashWithoutNonce [32]byte
	Timestamp                 *big.Int
	Nonce                     *big.Int
	Difficulty                *big.Int
	TotalDifficulty           *big.Int
}, error) {
	return _Testimonium.Contract.GetHeader(&_Testimonium.CallOpts, blockHash)
}

// GetHeader is a free data retrieval call binding the contract method 0xb9615878.
//
// Solidity: function getHeader(bytes32 blockHash) constant returns(bytes32 parent, bytes32 uncleHash, bytes32 stateRoot, bytes32 transactionsRoot, bytes32 receiptsRoot, uint256 blockNumber, uint256 gasLimit, bytes32 rlpHeaderHashWithoutNonce, uint256 timestamp, uint256 nonce, uint256 difficulty, uint256 totalDifficulty)
func (_Testimonium *TestimoniumCallerSession) GetHeader(blockHash [32]byte) (struct {
	Parent                    [32]byte
	UncleHash                 [32]byte
	StateRoot                 [32]byte
	TransactionsRoot          [32]byte
	ReceiptsRoot              [32]byte
	BlockNumber               *big.Int
	GasLimit                  *big.Int
	RlpHeaderHashWithoutNonce [32]byte
	Timestamp                 *big.Int
	Nonce                     *big.Int
	Difficulty                *big.Int
	TotalDifficulty           *big.Int
}, error) {
	return _Testimonium.Contract.GetHeader(&_Testimonium.CallOpts, blockHash)
}

// GetHeaderMetaInfo is a free data retrieval call binding the contract method 0x3b93fc10.
//
// Solidity: function getHeaderMetaInfo(bytes32 blockHash) constant returns(bytes32[] successors, uint256 orderedIndex, uint256 iterableIndex, bytes32 latestFork, uint256 lockedUntil)
func (_Testimonium *TestimoniumCaller) GetHeaderMetaInfo(opts *bind.CallOpts, blockHash [32]byte) (struct {
	Successors    [][32]byte
	OrderedIndex  *big.Int
	IterableIndex *big.Int
	LatestFork    [32]byte
	LockedUntil   *big.Int
}, error) {
	ret := new(struct {
		Successors    [][32]byte
		OrderedIndex  *big.Int
		IterableIndex *big.Int
		LatestFork    [32]byte
		LockedUntil   *big.Int
	})
	out := ret
	err := _Testimonium.contract.Call(opts, out, "getHeaderMetaInfo", blockHash)
	return *ret, err
}

// GetHeaderMetaInfo is a free data retrieval call binding the contract method 0x3b93fc10.
//
// Solidity: function getHeaderMetaInfo(bytes32 blockHash) constant returns(bytes32[] successors, uint256 orderedIndex, uint256 iterableIndex, bytes32 latestFork, uint256 lockedUntil)
func (_Testimonium *TestimoniumSession) GetHeaderMetaInfo(blockHash [32]byte) (struct {
	Successors    [][32]byte
	OrderedIndex  *big.Int
	IterableIndex *big.Int
	LatestFork    [32]byte
	LockedUntil   *big.Int
}, error) {
	return _Testimonium.Contract.GetHeaderMetaInfo(&_Testimonium.CallOpts, blockHash)
}

// GetHeaderMetaInfo is a free data retrieval call binding the contract method 0x3b93fc10.
//
// Solidity: function getHeaderMetaInfo(bytes32 blockHash) constant returns(bytes32[] successors, uint256 orderedIndex, uint256 iterableIndex, bytes32 latestFork, uint256 lockedUntil)
func (_Testimonium *TestimoniumCallerSession) GetHeaderMetaInfo(blockHash [32]byte) (struct {
	Successors    [][32]byte
	OrderedIndex  *big.Int
	IterableIndex *big.Int
	LatestFork    [32]byte
	LockedUntil   *big.Int
}, error) {
	return _Testimonium.Contract.GetHeaderMetaInfo(&_Testimonium.CallOpts, blockHash)
}

// GetNoOfForks is a free data retrieval call binding the contract method 0xfbb5df38.
//
// Solidity: function getNoOfForks() constant returns(uint256)
func (_Testimonium *TestimoniumCaller) GetNoOfForks(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Testimonium.contract.Call(opts, out, "getNoOfForks")
	return *ret0, err
}

// GetNoOfForks is a free data retrieval call binding the contract method 0xfbb5df38.
//
// Solidity: function getNoOfForks() constant returns(uint256)
func (_Testimonium *TestimoniumSession) GetNoOfForks() (*big.Int, error) {
	return _Testimonium.Contract.GetNoOfForks(&_Testimonium.CallOpts)
}

// GetNoOfForks is a free data retrieval call binding the contract method 0xfbb5df38.
//
// Solidity: function getNoOfForks() constant returns(uint256)
func (_Testimonium *TestimoniumCallerSession) GetNoOfForks() (*big.Int, error) {
	return _Testimonium.Contract.GetNoOfForks(&_Testimonium.CallOpts)
}

// IsBlock is a free data retrieval call binding the contract method 0x528a309f.
//
// Solidity: function isBlock(bytes32 hash) constant returns(bool)
func (_Testimonium *TestimoniumCaller) IsBlock(opts *bind.CallOpts, hash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Testimonium.contract.Call(opts, out, "isBlock", hash)
	return *ret0, err
}

// IsBlock is a free data retrieval call binding the contract method 0x528a309f.
//
// Solidity: function isBlock(bytes32 hash) constant returns(bool)
func (_Testimonium *TestimoniumSession) IsBlock(hash [32]byte) (bool, error) {
	return _Testimonium.Contract.IsBlock(&_Testimonium.CallOpts, hash)
}

// IsBlock is a free data retrieval call binding the contract method 0x528a309f.
//
// Solidity: function isBlock(bytes32 hash) constant returns(bool)
func (_Testimonium *TestimoniumCallerSession) IsBlock(hash [32]byte) (bool, error) {
	return _Testimonium.Contract.IsBlock(&_Testimonium.CallOpts, hash)
}

// IsUnlocked is a free data retrieval call binding the contract method 0x3dadc1e1.
//
// Solidity: function isUnlocked(bytes32 blockHash) constant returns(bool)
func (_Testimonium *TestimoniumCaller) IsUnlocked(opts *bind.CallOpts, blockHash [32]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Testimonium.contract.Call(opts, out, "isUnlocked", blockHash)
	return *ret0, err
}

// IsUnlocked is a free data retrieval call binding the contract method 0x3dadc1e1.
//
// Solidity: function isUnlocked(bytes32 blockHash) constant returns(bool)
func (_Testimonium *TestimoniumSession) IsUnlocked(blockHash [32]byte) (bool, error) {
	return _Testimonium.Contract.IsUnlocked(&_Testimonium.CallOpts, blockHash)
}

// IsUnlocked is a free data retrieval call binding the contract method 0x3dadc1e1.
//
// Solidity: function isUnlocked(bytes32 blockHash) constant returns(bool)
func (_Testimonium *TestimoniumCallerSession) IsUnlocked(blockHash [32]byte) (bool, error) {
	return _Testimonium.Contract.IsUnlocked(&_Testimonium.CallOpts, blockHash)
}

// LongestChainEndpoint is a free data retrieval call binding the contract method 0x0aa7fc0f.
//
// Solidity: function longestChainEndpoint() constant returns(bytes32)
func (_Testimonium *TestimoniumCaller) LongestChainEndpoint(opts *bind.CallOpts) ([32]byte, error) {
	var (
		ret0 = new([32]byte)
	)
	out := ret0
	err := _Testimonium.contract.Call(opts, out, "longestChainEndpoint")
	return *ret0, err
}

// LongestChainEndpoint is a free data retrieval call binding the contract method 0x0aa7fc0f.
//
// Solidity: function longestChainEndpoint() constant returns(bytes32)
func (_Testimonium *TestimoniumSession) LongestChainEndpoint() ([32]byte, error) {
	return _Testimonium.Contract.LongestChainEndpoint(&_Testimonium.CallOpts)
}

// LongestChainEndpoint is a free data retrieval call binding the contract method 0x0aa7fc0f.
//
// Solidity: function longestChainEndpoint() constant returns(bytes32)
func (_Testimonium *TestimoniumCallerSession) LongestChainEndpoint() ([32]byte, error) {
	return _Testimonium.Contract.LongestChainEndpoint(&_Testimonium.CallOpts)
}

// VerifyReceipt is a free data retrieval call binding the contract method 0x10fa6e83.
//
// Solidity: function verifyReceipt(bytes32 blockHash, uint8 noOfConfirmations, bytes rlpEncodedReceipt, bytes path, bytes rlpEncodedNodes) constant returns(uint8)
func (_Testimonium *TestimoniumCaller) VerifyReceipt(opts *bind.CallOpts, blockHash [32]byte, noOfConfirmations uint8, rlpEncodedReceipt []byte, path []byte, rlpEncodedNodes []byte) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Testimonium.contract.Call(opts, out, "verifyReceipt", blockHash, noOfConfirmations, rlpEncodedReceipt, path, rlpEncodedNodes)
	return *ret0, err
}

// VerifyReceipt is a free data retrieval call binding the contract method 0x10fa6e83.
//
// Solidity: function verifyReceipt(bytes32 blockHash, uint8 noOfConfirmations, bytes rlpEncodedReceipt, bytes path, bytes rlpEncodedNodes) constant returns(uint8)
func (_Testimonium *TestimoniumSession) VerifyReceipt(blockHash [32]byte, noOfConfirmations uint8, rlpEncodedReceipt []byte, path []byte, rlpEncodedNodes []byte) (uint8, error) {
	return _Testimonium.Contract.VerifyReceipt(&_Testimonium.CallOpts, blockHash, noOfConfirmations, rlpEncodedReceipt, path, rlpEncodedNodes)
}

// VerifyReceipt is a free data retrieval call binding the contract method 0x10fa6e83.
//
// Solidity: function verifyReceipt(bytes32 blockHash, uint8 noOfConfirmations, bytes rlpEncodedReceipt, bytes path, bytes rlpEncodedNodes) constant returns(uint8)
func (_Testimonium *TestimoniumCallerSession) VerifyReceipt(blockHash [32]byte, noOfConfirmations uint8, rlpEncodedReceipt []byte, path []byte, rlpEncodedNodes []byte) (uint8, error) {
	return _Testimonium.Contract.VerifyReceipt(&_Testimonium.CallOpts, blockHash, noOfConfirmations, rlpEncodedReceipt, path, rlpEncodedNodes)
}

// VerifyState is a free data retrieval call binding the contract method 0xfadfdb81.
//
// Solidity: function verifyState(bytes32 blockHash, uint8 noOfConfirmations, bytes rlpEncodedState, bytes path, bytes rlpEncodedNodes) constant returns(uint8)
func (_Testimonium *TestimoniumCaller) VerifyState(opts *bind.CallOpts, blockHash [32]byte, noOfConfirmations uint8, rlpEncodedState []byte, path []byte, rlpEncodedNodes []byte) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Testimonium.contract.Call(opts, out, "verifyState", blockHash, noOfConfirmations, rlpEncodedState, path, rlpEncodedNodes)
	return *ret0, err
}

// VerifyState is a free data retrieval call binding the contract method 0xfadfdb81.
//
// Solidity: function verifyState(bytes32 blockHash, uint8 noOfConfirmations, bytes rlpEncodedState, bytes path, bytes rlpEncodedNodes) constant returns(uint8)
func (_Testimonium *TestimoniumSession) VerifyState(blockHash [32]byte, noOfConfirmations uint8, rlpEncodedState []byte, path []byte, rlpEncodedNodes []byte) (uint8, error) {
	return _Testimonium.Contract.VerifyState(&_Testimonium.CallOpts, blockHash, noOfConfirmations, rlpEncodedState, path, rlpEncodedNodes)
}

// VerifyState is a free data retrieval call binding the contract method 0xfadfdb81.
//
// Solidity: function verifyState(bytes32 blockHash, uint8 noOfConfirmations, bytes rlpEncodedState, bytes path, bytes rlpEncodedNodes) constant returns(uint8)
func (_Testimonium *TestimoniumCallerSession) VerifyState(blockHash [32]byte, noOfConfirmations uint8, rlpEncodedState []byte, path []byte, rlpEncodedNodes []byte) (uint8, error) {
	return _Testimonium.Contract.VerifyState(&_Testimonium.CallOpts, blockHash, noOfConfirmations, rlpEncodedState, path, rlpEncodedNodes)
}

// VerifyTransaction is a free data retrieval call binding the contract method 0xa90a51f4.
//
// Solidity: function verifyTransaction(bytes32 blockHash, uint8 noOfConfirmations, bytes rlpEncodedTx, bytes path, bytes rlpEncodedNodes) constant returns(uint8)
func (_Testimonium *TestimoniumCaller) VerifyTransaction(opts *bind.CallOpts, blockHash [32]byte, noOfConfirmations uint8, rlpEncodedTx []byte, path []byte, rlpEncodedNodes []byte) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _Testimonium.contract.Call(opts, out, "verifyTransaction", blockHash, noOfConfirmations, rlpEncodedTx, path, rlpEncodedNodes)
	return *ret0, err
}

// VerifyTransaction is a free data retrieval call binding the contract method 0xa90a51f4.
//
// Solidity: function verifyTransaction(bytes32 blockHash, uint8 noOfConfirmations, bytes rlpEncodedTx, bytes path, bytes rlpEncodedNodes) constant returns(uint8)
func (_Testimonium *TestimoniumSession) VerifyTransaction(blockHash [32]byte, noOfConfirmations uint8, rlpEncodedTx []byte, path []byte, rlpEncodedNodes []byte) (uint8, error) {
	return _Testimonium.Contract.VerifyTransaction(&_Testimonium.CallOpts, blockHash, noOfConfirmations, rlpEncodedTx, path, rlpEncodedNodes)
}

// VerifyTransaction is a free data retrieval call binding the contract method 0xa90a51f4.
//
// Solidity: function verifyTransaction(bytes32 blockHash, uint8 noOfConfirmations, bytes rlpEncodedTx, bytes path, bytes rlpEncodedNodes) constant returns(uint8)
func (_Testimonium *TestimoniumCallerSession) VerifyTransaction(blockHash [32]byte, noOfConfirmations uint8, rlpEncodedTx []byte, path []byte, rlpEncodedNodes []byte) (uint8, error) {
	return _Testimonium.Contract.VerifyTransaction(&_Testimonium.CallOpts, blockHash, noOfConfirmations, rlpEncodedTx, path, rlpEncodedNodes)
}

// DisputeBlock is a paid mutator transaction binding the contract method 0x66962b26.
//
// Solidity: function disputeBlock(bytes32 blockHash, uint256[] dataSetLookup, uint256[] witnessForLookup) returns()
func (_Testimonium *TestimoniumTransactor) DisputeBlock(opts *bind.TransactOpts, blockHash [32]byte, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "disputeBlock", blockHash, dataSetLookup, witnessForLookup)
}

// DisputeBlock is a paid mutator transaction binding the contract method 0x66962b26.
//
// Solidity: function disputeBlock(bytes32 blockHash, uint256[] dataSetLookup, uint256[] witnessForLookup) returns()
func (_Testimonium *TestimoniumSession) DisputeBlock(blockHash [32]byte, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.DisputeBlock(&_Testimonium.TransactOpts, blockHash, dataSetLookup, witnessForLookup)
}

// DisputeBlock is a paid mutator transaction binding the contract method 0x66962b26.
//
// Solidity: function disputeBlock(bytes32 blockHash, uint256[] dataSetLookup, uint256[] witnessForLookup) returns()
func (_Testimonium *TestimoniumTransactorSession) DisputeBlock(blockHash [32]byte, dataSetLookup []*big.Int, witnessForLookup []*big.Int) (*types.Transaction, error) {
	return _Testimonium.Contract.DisputeBlock(&_Testimonium.TransactOpts, blockHash, dataSetLookup, witnessForLookup)
}

// SubmitHeader is a paid mutator transaction binding the contract method 0xc565ba10.
//
// Solidity: function submitHeader(bytes _rlpHeader) returns()
func (_Testimonium *TestimoniumTransactor) SubmitHeader(opts *bind.TransactOpts, _rlpHeader []byte) (*types.Transaction, error) {
	return _Testimonium.contract.Transact(opts, "submitHeader", _rlpHeader)
}

// SubmitHeader is a paid mutator transaction binding the contract method 0xc565ba10.
//
// Solidity: function submitHeader(bytes _rlpHeader) returns()
func (_Testimonium *TestimoniumSession) SubmitHeader(_rlpHeader []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.SubmitHeader(&_Testimonium.TransactOpts, _rlpHeader)
}

// SubmitHeader is a paid mutator transaction binding the contract method 0xc565ba10.
//
// Solidity: function submitHeader(bytes _rlpHeader) returns()
func (_Testimonium *TestimoniumTransactorSession) SubmitHeader(_rlpHeader []byte) (*types.Transaction, error) {
	return _Testimonium.Contract.SubmitHeader(&_Testimonium.TransactOpts, _rlpHeader)
}

// TestimoniumPoWValidationResultIterator is returned from FilterPoWValidationResult and is used to iterate over the raw logs and unpacked data for PoWValidationResult events raised by the Testimonium contract.
type TestimoniumPoWValidationResultIterator struct {
	Event *TestimoniumPoWValidationResult // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumPoWValidationResultIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumPoWValidationResult)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumPoWValidationResult)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumPoWValidationResultIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumPoWValidationResultIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumPoWValidationResult represents a PoWValidationResult event raised by the Testimonium contract.
type TestimoniumPoWValidationResult struct {
	IsPoWValid bool
	ErrorCode  *big.Int
	ErrorInfo  *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterPoWValidationResult is a free log retrieval operation binding the contract event 0x808f84bd298b89733055f3b8294b385ed860b67438b792ff9e312c897a2fcd9f.
//
// Solidity: event PoWValidationResult(bool isPoWValid, uint256 errorCode, uint256 errorInfo)
func (_Testimonium *TestimoniumFilterer) FilterPoWValidationResult(opts *bind.FilterOpts) (*TestimoniumPoWValidationResultIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "PoWValidationResult")
	if err != nil {
		return nil, err
	}
	return &TestimoniumPoWValidationResultIterator{contract: _Testimonium.contract, event: "PoWValidationResult", logs: logs, sub: sub}, nil
}

// WatchPoWValidationResult is a free log subscription operation binding the contract event 0x808f84bd298b89733055f3b8294b385ed860b67438b792ff9e312c897a2fcd9f.
//
// Solidity: event PoWValidationResult(bool isPoWValid, uint256 errorCode, uint256 errorInfo)
func (_Testimonium *TestimoniumFilterer) WatchPoWValidationResult(opts *bind.WatchOpts, sink chan<- *TestimoniumPoWValidationResult) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "PoWValidationResult")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumPoWValidationResult)
				if err := _Testimonium.contract.UnpackLog(event, "PoWValidationResult", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePoWValidationResult is a log parse operation binding the contract event 0x808f84bd298b89733055f3b8294b385ed860b67438b792ff9e312c897a2fcd9f.
//
// Solidity: event PoWValidationResult(bool isPoWValid, uint256 errorCode, uint256 errorInfo)
func (_Testimonium *TestimoniumFilterer) ParsePoWValidationResult(log types.Log) (*TestimoniumPoWValidationResult, error) {
	event := new(TestimoniumPoWValidationResult)
	if err := _Testimonium.contract.UnpackLog(event, "PoWValidationResult", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TestimoniumRemoveBranchIterator is returned from FilterRemoveBranch and is used to iterate over the raw logs and unpacked data for RemoveBranch events raised by the Testimonium contract.
type TestimoniumRemoveBranchIterator struct {
	Event *TestimoniumRemoveBranch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumRemoveBranchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumRemoveBranch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumRemoveBranch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumRemoveBranchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumRemoveBranchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumRemoveBranch represents a RemoveBranch event raised by the Testimonium contract.
type TestimoniumRemoveBranch struct {
	Root [32]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterRemoveBranch is a free log retrieval operation binding the contract event 0xf96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4.
//
// Solidity: event RemoveBranch(bytes32 root)
func (_Testimonium *TestimoniumFilterer) FilterRemoveBranch(opts *bind.FilterOpts) (*TestimoniumRemoveBranchIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "RemoveBranch")
	if err != nil {
		return nil, err
	}
	return &TestimoniumRemoveBranchIterator{contract: _Testimonium.contract, event: "RemoveBranch", logs: logs, sub: sub}, nil
}

// WatchRemoveBranch is a free log subscription operation binding the contract event 0xf96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4.
//
// Solidity: event RemoveBranch(bytes32 root)
func (_Testimonium *TestimoniumFilterer) WatchRemoveBranch(opts *bind.WatchOpts, sink chan<- *TestimoniumRemoveBranch) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "RemoveBranch")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumRemoveBranch)
				if err := _Testimonium.contract.UnpackLog(event, "RemoveBranch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemoveBranch is a log parse operation binding the contract event 0xf96ae1a1e71431cfb86761b9cab725aeddab2afdaf76d40d43fc005bdc6555d4.
//
// Solidity: event RemoveBranch(bytes32 root)
func (_Testimonium *TestimoniumFilterer) ParseRemoveBranch(log types.Log) (*TestimoniumRemoveBranch, error) {
	event := new(TestimoniumRemoveBranch)
	if err := _Testimonium.contract.UnpackLog(event, "RemoveBranch", log); err != nil {
		return nil, err
	}
	return event, nil
}

// TestimoniumSubmitBlockHeaderIterator is returned from FilterSubmitBlockHeader and is used to iterate over the raw logs and unpacked data for SubmitBlockHeader events raised by the Testimonium contract.
type TestimoniumSubmitBlockHeaderIterator struct {
	Event *TestimoniumSubmitBlockHeader // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TestimoniumSubmitBlockHeaderIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TestimoniumSubmitBlockHeader)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TestimoniumSubmitBlockHeader)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TestimoniumSubmitBlockHeaderIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TestimoniumSubmitBlockHeaderIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TestimoniumSubmitBlockHeader represents a SubmitBlockHeader event raised by the Testimonium contract.
type TestimoniumSubmitBlockHeader struct {
	Hash        [32]byte
	BlockNumber *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterSubmitBlockHeader is a free log retrieval operation binding the contract event 0xd2e39e7cf9d53e31fad1c42bf2492877187827c962f28faacd69c50b9fa09d36.
//
// Solidity: event SubmitBlockHeader(bytes32 hash, uint256 blockNumber)
func (_Testimonium *TestimoniumFilterer) FilterSubmitBlockHeader(opts *bind.FilterOpts) (*TestimoniumSubmitBlockHeaderIterator, error) {

	logs, sub, err := _Testimonium.contract.FilterLogs(opts, "SubmitBlockHeader")
	if err != nil {
		return nil, err
	}
	return &TestimoniumSubmitBlockHeaderIterator{contract: _Testimonium.contract, event: "SubmitBlockHeader", logs: logs, sub: sub}, nil
}

// WatchSubmitBlockHeader is a free log subscription operation binding the contract event 0xd2e39e7cf9d53e31fad1c42bf2492877187827c962f28faacd69c50b9fa09d36.
//
// Solidity: event SubmitBlockHeader(bytes32 hash, uint256 blockNumber)
func (_Testimonium *TestimoniumFilterer) WatchSubmitBlockHeader(opts *bind.WatchOpts, sink chan<- *TestimoniumSubmitBlockHeader) (event.Subscription, error) {

	logs, sub, err := _Testimonium.contract.WatchLogs(opts, "SubmitBlockHeader")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TestimoniumSubmitBlockHeader)
				if err := _Testimonium.contract.UnpackLog(event, "SubmitBlockHeader", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubmitBlockHeader is a log parse operation binding the contract event 0xd2e39e7cf9d53e31fad1c42bf2492877187827c962f28faacd69c50b9fa09d36.
//
// Solidity: event SubmitBlockHeader(bytes32 hash, uint256 blockNumber)
func (_Testimonium *TestimoniumFilterer) ParseSubmitBlockHeader(log types.Log) (*TestimoniumSubmitBlockHeader, error) {
	event := new(TestimoniumSubmitBlockHeader)
	if err := _Testimonium.contract.UnpackLog(event, "SubmitBlockHeader", log); err != nil {
		return nil, err
	}
	return event, nil
}
